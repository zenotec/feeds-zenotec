Index: rtap-0.7/Makefile
===================================================================
--- rtap-0.7.orig/Makefile
+++ rtap-0.7/Makefile
@@ -9,6 +9,12 @@ KERNEL_SRC ?= /lib/modules/$(KVERSION)/b
 all:
 	$(MAKE) -C $(KERNEL_SRC) M=$(SRC)
 
+modules:
+	$(MAKE) -C $(KERNEL_SRC) M=$(SRC)
+
+install:
+	$(MAKE) -C $(KERNEL_SRC) M=$(SRC) modules_install
+
 modules_install:
 	$(MAKE) -C $(KERNEL_SRC) M=$(SRC) modules_install
 
Index: rtap-0.7/filter.c
===================================================================
--- rtap-0.7.orig/filter.c
+++ rtap-0.7/filter.c
@@ -126,7 +126,7 @@ rtap_func( struct sk_buff *skb, struct n
     switch( cmd )
     {    
         case FILTER_CMD_FWRD:
-            printk( KERN_INFO "RTAP: Forwarding\n" );
+            //printk( KERN_INFO "RTAP: Forwarding\n" );
             ip_list_send( skb );
             break;
         case FILTER_CMD_DROP:
Index: rtap-0.7/listener.c
===================================================================
--- rtap-0.7.orig/listener.c
+++ rtap-0.7/listener.c
@@ -61,7 +61,7 @@ static listener_t listeners = { { 0 } };
 
 //*****************************************************************************
 static int
-ip_list_add( const char *ipaddr )
+ip_list_add( const char *ipaddr, const short port )
 {
     listener_t *listener = NULL;
 
@@ -77,8 +77,8 @@ ip_list_add( const char *ipaddr )
     // Convert IP string to socket address
     memset( &listener->in_addr, 0, sizeof( listener->in_addr ) );
     listener->in_addr.sin_family = AF_INET;
-    listener->in_addr.sin_port = htons( 8888 );
     inet_aton( ipaddr, &listener->in_addr.sin_addr );
+    listener->in_addr.sin_port = htons( port );
     listener->sockfd = ksocket( AF_INET, SOCK_DGRAM, 0 );
     if( listener->sockfd == NULL )
     {
@@ -97,6 +97,7 @@ ip_list_add( const char *ipaddr )
     } // end if
 
     // Add device list item to tail of device list
+    printk( KERN_INFO "RTAP: Adding listener: %s:%hu\n", listener->ipaddr, port );
     spin_lock( &listeners.lock );
     list_add_tail( &listener->list, &listeners.list );
     spin_unlock( &listeners.lock );
@@ -107,7 +108,7 @@ ip_list_add( const char *ipaddr )
 
 //*****************************************************************************
 static int
-ip_list_remove( const char *ipaddr )
+ip_list_remove( const char *ipaddr, const short port )
 {
     listener_t *listener = NULL;
     listener_t *tmp = NULL;
@@ -117,9 +118,10 @@ ip_list_remove( const char *ipaddr )
     spin_lock( &listeners.lock );
     list_for_each_entry_safe( listener, tmp, &listeners.list, list )
     {
-        if( ! strcmp( listener->ipaddr, ipaddr ) )
+        if( ! strcmp( listener->ipaddr, ipaddr ) && (listener->in_addr.sin_port == htons( port )) )
         {
-            printk( KERN_INFO "RTAP: Removing listener: %s\n", listener->ipaddr );
+            printk( KERN_INFO "RTAP: Removing listener: %s:%hu\n",
+                    listener->ipaddr, ntohs(listener->in_addr.sin_port) );
             list_del( &listener->list );
             kfree( listener->ipaddr );
             kfree( listener );
@@ -144,7 +146,8 @@ ip_list_clear( void )
     spin_lock( &listeners.lock );
     list_for_each_entry_safe( listener, tmp, &listeners.list, list )
     {
-        printk( KERN_INFO "RTAP: Removing listener: %s\n", listener->ipaddr );
+        printk( KERN_INFO "RTAP: Removing listener: %s:%hu\n",
+                listener->ipaddr, ntohs(listener->in_addr.sin_port) );
         list_del( &listener->list );
         kfree( listener->ipaddr );
         kfree( listener );
@@ -200,7 +203,8 @@ ip_proc_show( struct seq_file *file, voi
     spin_lock( &listeners.lock );
     list_for_each_entry_safe( listener, tmp, &listeners.list, list )
     {
-        seq_printf( file, "%s\n", listener->ipaddr );
+        seq_printf( file, "%s:%hu\n", listener->ipaddr,
+                    ntohs(listener->in_addr.sin_port) );
     } // end loop 
     spin_unlock( &listeners.lock );
 
@@ -241,29 +245,30 @@ ip_proc_write( struct file *file, const
 {
     char ipstr[256+1] = { 0 };
     char ipaddr[16+1] = { 0 };
+    short port = 8888;
     int ret = 0;
 
     cnt = (cnt >= 256) ? 256 : cnt;
     copy_from_user( ipstr, buf, cnt );
-    ret = sscanf( ipstr, "%16s", ipaddr );
+    ret = sscanf( ipstr, "%16s:%hu", ipaddr, &port );
 
     if( (ret == 1) && (strlen(ipaddr) == 1) && (ipaddr[0] == '-') )
     {
         ip_list_clear();
     } // end if
-    else if( (ret == 1) && (strlen(ipaddr) > 1) )
+    else if( (ret >= 1) && (strlen(ipaddr) > 1) )
     {
         if( ipaddr[0] == '-' )
         {
-            ip_list_remove( &ipaddr[1] );
+            ip_list_remove( &ipaddr[1], port );
         } // end if
         else if( ipaddr[0] == '+' )
         {
-            ip_list_add( &ipaddr[1] );
+            ip_list_add( &ipaddr[1], port );
         } // end else
         else
         {
-            ip_list_add( ipaddr );
+            ip_list_add( ipaddr, port );
         } // end else
     } // end else if
     else
Index: rtap-0.7/rtap-ko.h
===================================================================
--- rtap-0.7.orig/rtap-ko.h
+++ rtap-0.7/rtap-ko.h
@@ -25,7 +25,7 @@
 #define __RTAP_KO_H__
 
 
-#define DRIVER_VERSION  "v0.0.9"
+#define DRIVER_VERSION  "v0.0.10"
 #define DRIVER_AUTHOR   "Kevin Mahoney <kevin.mahoney@zenotec.net>"
 #define DRIVER_NAME     "rtap"
 #define DRIVER_DESC     "Wireless packet forwarder with simple filtering capabilities"
